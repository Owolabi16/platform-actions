name: "Update HelmRelease Version in Flux Repo"
description: "Updates the HelmRelease chart version inside the appropriate environment patches directory"
inputs:
  environment:
    description: "Environment (prod, staging, rc-next) whose patches should be updated"
    required: true
  chart_version:
    description: "New Helm chart version"
    required: true
  branch_prefix:
    description: "Branch prefix for PR"
    required: false
    default: "update-helm"
  github_token:
    description: "GitHub token for authentication"
    required: true
  github_actor:
    description: "GitHub Actor for authentication"
    required: true

runs:
  using: "composite"
  steps:
    # Use a custom checkout approach instead of the action
    - name: Manual Checkout
      shell: bash
      run: |
        # Clone with token in URL (this avoids the credential prompt)
        AUTH_URL="https://${{ inputs.github_token }}@github.com/${{ github.repository }}.git"
        echo "Cloning repository..."
        git clone --depth=1 $AUTH_URL flux
        cd flux
        
        # Setup Git config
        git config user.name "${{ inputs.github_actor }}"
        git config user.email "${{ inputs.github_actor }}@users.noreply.github.com"
        
        # Verify clone worked
        echo "Repository cloned successfully"
        ls -la

    - name: Create dummy files for testing
      shell: bash
      run: |
        # Create test directories if they don't exist
        mkdir -p flux/tenants/${{ inputs.environment }}/patches
        
        # Create a test YAML file
        cat > flux/tenants/${{ inputs.environment }}/patches/test-helmrelease.yaml << EOF
        apiVersion: helm.toolkit.fluxcd.io/v2beta1
        kind: HelmRelease
        metadata:
          name: test-release
        spec:
          chart:
            spec:
              version: "0.1.0"
        EOF
        
        echo "Created test files"
        ls -la flux/tenants/${{ inputs.environment }}/patches/

    - name: Update YAML files in the specified environment
      shell: bash
      run: |
        cd flux/tenants/${{ inputs.environment }}/patches
        
        # Loop through all YAML files in the patches directory
        for file in *.yaml; do
          if [ -f "$file" ]; then
            echo "Updating $file with new chart version: ${{ inputs.chart_version }}"
            yq -i '.spec.chart.spec.version = "${{ inputs.chart_version }}"' "$file"
          fi
        done
        
        # Show the changes
        cat *.yaml

    - name: Commit and push tenant changes
      shell: bash
      run: |
        cd flux
        # Configure Git with token authentication
        AUTH_URL="https://${{ inputs.github_token }}@github.com/${{ github.repository }}.git"
        
        # Create and checkout new branch
        BRANCH_NAME="${{ inputs.branch_prefix }}-${{ github.run_id }}"
        echo "Using branch: $BRANCH_NAME"
        git checkout -b $BRANCH_NAME
        
        # Add and commit changes
        git add .
        git commit -m "chore: Update Helm chart version to ${{ inputs.chart_version }} for ${{ inputs.environment }} environment"
        
        # Push using the auth URL
        echo "Pushing changes..."
        git push $AUTH_URL $BRANCH_NAME
        
        # Set branch name in env for PR creation
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

    - name: Create Pull Request
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}
      run: |
        cd flux
        echo "Creating pull request..."
        echo "Branch: $BRANCH_NAME"
        
        # Configure gh CLI with token
        gh auth setup-git
        
        # Get default branch
        default_branch=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
        echo "Default branch: $default_branch"
        
        # Create PR
        gh pr create \
          --title "Update Helm chart version to ${{ inputs.chart_version }} for ${{ inputs.environment }}" \
          --body "Automated deployment for ${{ inputs.environment }} environment" \
          --base $default_branch \
          --head $BRANCH_NAME \
          --repo "${{ github.repository }}"
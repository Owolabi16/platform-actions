name: Build, Push Helm Chart & build image
description: 'Builds and packages a Helm chart'
inputs:
  chart_tag:
    description: 'Force Version Override?'
    required: false
    type: string
  chart_overwrite:
    description: 'Force Chart Overwrite?'
    required: true
    type: boolean
  git_branch:
    description: 'Git branch to checkout'
    required: false
    type: string
  pre_build_script:
    description: 'Pre-build script to run'
    required: false
    type: string
  is_lib_chart:
    description: 'Is this a library chart?'
    required: false
    type: boolean
  custom-image-name:
    description: 'Custom image name'
    required: false
    type: string
  build-target:
    description: 'Docker build target'
    required: false
    type: string
  docker-build-args:
    description: 'Docker build arguments'
    required: false
    type: string
  dockerfile-path:
    description: 'Path to Dockerfile'
    required: false
    type: string
  docker-arch:
    description: 'Docker architectures to build'
    required: false
    type: string


outputs:
  docker-tag:
    description: 'Docker tag'
    value: ${{ steps.meta.outputs.version }}
  docker-repo:
    description: 'Docker repository'
    value: ${{ steps.docker-repo.outputs.DOCKER_REPOSITORY }}

runs:
  using: "composite"
  steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.docker-hub-user }}
        password: ${{ inputs.docker-hub-token }}
        logout: false

  - name: Set Docker Repository Variable
      shell: bash
      run: echo "DOCKER_REPOSITORY=${{ inputs.docker-hub-user }}/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_ENV

    - name: Set Docker Repository Output
      id: docker-repo
      shell: bash
      run: echo "DOCKER_REPOSITORY=${{ inputs.docker-hub-user }}/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_OUTPUT

    - name: Set Repository Owner
      shell: bash
      run: echo "REPO_OWNER=$( echo ${{ github.repository_owner }} | awk '{print tolower($0)}' )" >> $GITHUB_ENV

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.pat-token }}
        logout: false

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ inputs.docker-hub-user }}/platform-actions
        tags: |
          type=schedule
          type=ref,event=branch
          type=ref,event=pr,suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
          type=semver,pattern={{version}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
          type=semver,pattern={{major}}.{{minor}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
          type=semver,pattern={{major}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
          type=sha
          type=raw,value=${{ inputs.build-target }}
         
    - name: Build and push
      id: build
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        file: ${{ inputs.dockerfile-path }}
        platforms: ${{ inputs.docker-arch }}
        pull: true
        no-cache: false
        cache-from: type=registry,ref=ghcr.io/${{ env.REPO_OWNER }}/cache:buildcache
        cache-to: type=registry,ref=ghcr.io/${{ env.REPO_OWNER }}/cache:buildcache,mode=max
        target: ${{ inputs.build-target }}

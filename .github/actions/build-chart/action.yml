name: 'Build Chart'
description: 'Builds and packages a Helm chart'

inputs:
  chart_dir:
    description: 'Directory containing the chart to build'
    required: true
  chart_overwrite:
    description: 'Whether to overwrite existing chart'
    required: false
    default: 'true'
  is_lib_chart:
    description: 'Whether this is a library chart'
    required: false
    default: 'false'
  git_branch:
    description: 'Git branch to use'
    required: true
  custom-image-name:
    description: 'Custom image name'
    required: false
    default: ''
  build-target:
    description: 'Build target'
    required: false
    default: ''
  dockerfile-path:
    description: 'Path to Dockerfile'
    required: false
    default: 'Dockerfile'
  docker-arch:
    description: 'Docker architecture'
    required: false
    default: 'linux/amd64'
  docker-hub-user:
    description: 'Docker Hub username'
    required: false
    default: 'occasio'
  docker-hub-token:
    description: 'Docker Hub token'
    required: true
  pat-token:
    description: 'GitHub Personal Access Token'
    required: true

outputs:
  docker-tag:
    description: 'Docker tag'
    value: ${{ steps.meta.outputs.version }}
  docker-repo:
    description: 'Docker repository'
    value: ${{ steps.docker-repo.outputs.DOCKER_REPOSITORY }}

runs:
  using: "composite"
  steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.docker-hub-user }}
        password: ${{ inputs.docker-hub-token }}
      
    - name: Set Docker Repository Variable
      shell: bash
      run: echo "DOCKER_REPOSITORY=${{ inputs.docker-hub-user }}/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_ENV
      
    - name: Set Docker Repository Output
      id: docker-repo
      shell: bash
      run: echo "DOCKER_REPOSITORY=${{ inputs.docker-hub-user }}/$( echo ${{ github.repository }} | awk -F '/' '{print $2}' | awk '{print tolower($0)}' )" >> $GITHUB_OUTPUT
      
    - name: Set Repository Owner
      shell: bash
      run: echo "REPO_OWNER=$( echo ${{ github.repository_owner }} | awk '{print tolower($0)}' )" >> $GITHUB_ENV
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # - name: Login to GitHub Container Registry
    #   uses: docker/login-action@v2
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.actor }}
    #     password: ${{ inputs.pat-token }}
      
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ inputs.custom-image-name != '' && format('{0}/{1}', inputs.docker-hub-user, inputs.custom-image-name) || env.DOCKER_REPOSITORY }}
        tags: |
          type=schedule
          type=ref,event=branch
          type=ref,event=pr,suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
          type=semver,pattern={{version}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
          type=semver,pattern={{major}}.{{minor}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
          type=semver,pattern={{major}},suffix=${{ inputs.build-target != '' && format('-{0}', inputs.build-target) || ''}}
          type=sha
          type=raw,value=${{ inputs.build-target }}
         
    - name: Build and push
      id: build
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        file: ${{ inputs.dockerfile-path }}
        platforms: ${{ inputs.docker-arch }}
        pull: true
        no-cache: false
        cache-from: type=registry,ref=ghcr.io/${{ env.REPO_OWNER }}/cache:buildcache
        cache-to: type=registry,ref=ghcr.io/${{ env.REPO_OWNER }}/cache:buildcache,mode=max
        target: ${{ inputs.build-target }}
    
    - name: Helm Package
      shell: bash
      run: |
        # Add Helm packaging steps here
        echo "Building chart from ${{ inputs.chart_dir }}"
        
        # Example Helm package command
        if [ "${{ inputs.chart_overwrite }}" == "true" ]; then
          helm package ${{ inputs.chart_dir }} --force
        else
          helm package ${{ inputs.chart_dir }}
        fi
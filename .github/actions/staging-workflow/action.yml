name: 'Staging Workflow'
description: 'Handles patch releases to staging environment'

inputs:
  release_version:
    description: 'Release version (format: x-x-x)'
    required: true
  github_token:
    description: 'GitHub token for authentication'
    required: true
  github_actor:
    description: 'GitHub actor/username'
    required: true
  target_repo:
    description: 'Optional: Specific repository to deploy'
    required: false
  docker_hub_token:
    description: 'Docker Hub token for authentication'
    required: true

outputs:
  platform_version:
    description: 'Platform chart version'
    value: ${{ steps.parse_version.outputs.version }}

runs:
  using: "composite"
  steps:
    - name: Parse version
      id: parse_version
      shell: bash
      run: |
        RELEASE_VERSION="${{ inputs.release_version }}"
        # Remove any 'v' prefix if present
        RELEASE_VERSION="${RELEASE_VERSION#v}"
        echo "Version: $RELEASE_VERSION"
        echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
    
    - name: Create branch
      id: create_branch
      shell: bash
      run: |
        BRANCH_NAME="platform-${{ inputs.release_version }}"
        
        git config --global user.name "${{ inputs.github_actor }}"
        git config --global user.email "${{ inputs.github_actor }}@users.noreply.github.com"
        
        # Try to checkout branch if it exists, create it if it doesn't
        git checkout $BRANCH_NAME 2>/dev/null || git checkout -b $BRANCH_NAME
        
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
    
    - name: Update chart versions
      shell: bash
      run: |
        VERSION="${{ steps.parse_version.outputs.version }}"
        
        # Update Chart.yaml
        if [ -f "charts/platform/Chart.yaml" ]; then
          echo "Updating Chart.yaml with version $VERSION"
          yq e ".version = \"$VERSION\"" -i charts/platform/Chart.yaml
          yq e ".appVersion = \"$VERSION\"" -i charts/platform/Chart.yaml
        else
          echo "Chart.yaml not found at charts/platform/Chart.yaml"
          find charts -name "Chart.yaml" || echo "No Chart.yaml files found"
        fi
        
        # Update values.yaml if it exists
        if [ -f "charts/platform/values.yaml" ]; then
          echo "Updating values.yaml with version $VERSION"
          yq e ".appVersion = \"$VERSION\"" -i charts/platform/values.yaml
        fi
    
    - name: Commit and push changes
      shell: bash
      run: |
        # Add all changes to git
        git add .
        
        # Commit changes (don't fail if nothing to commit)
        git commit -m "chore: bump version to ${{ steps.parse_version.outputs.version }}" || echo "No changes to commit"
        
        # Set up authentication for push
        git remote set-url origin https://${{ inputs.github_actor }}:${{ inputs.github_token }}@github.com/${{ github.repository }}.git
        
        # Push changes
        git push -u origin ${{ steps.create_branch.outputs.branch_name }}
    
    - name: Create PR via API
      shell: bash
      run: |
        # Create PR using curl and GitHub API
        PR_RESPONSE=$(curl -s -X POST \
          -H "Authorization: token ${{ inputs.github_token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/pulls \
          -d '{
            "title": "Patch Release: ${{ steps.parse_version.outputs.version }}",
            "body": "This PR updates the chart version to ${{ steps.parse_version.outputs.version }}",
            "head": "${{ steps.create_branch.outputs.branch_name }}",
            "base": "main"
          }')
        
        echo "PR created:"
        echo "$PR_RESPONSE" | grep -E 'html_url|message' || echo "Could not parse PR response"
    
    - name: Build Docker image
      shell: bash
      run: |
        echo "Setting up Docker for build"
        
        # Set up Docker buildx
        docker buildx create --use --name builder-${{ github.run_id }} || true
        
        # Build and push Docker image
        docker buildx build \
          --push \
          --platform linux/amd64 \
          -t "owolabialiu/platform-actions:${{ steps.parse_version.outputs.version }}" \
          -t "owolabialiu/platform-actions:latest" \
          -f Dockerfile .
    
    - name: Package Helm chart
      shell: bash
      run: |
        echo "Building chart from charts/platform"
        mkdir -p helm-charts
        
        # Package the chart
        helm package charts/platform -d helm-charts || echo "Failed to package chart"
        
        # List the generated packages
        ls -la helm-charts || echo "No Helm charts generated"
    
    - name: Deploy to staging
      shell: bash
      run: |
        echo "Triggering deployment to staging for version ${{ steps.parse_version.outputs.version }}"
        export BRANCH_NAME="${{ steps.create_branch.outputs.branch_name }}"
        export GITHUB_TOKEN="${{ inputs.github_token }}"
        export FILE_LOCATION="${{ github.workspace }}"
        export TARGET_REPO="${{ inputs.target_repo }}"
        
        # Check if rc-next-workflow exists
        if [ -d "./.github/actions/rc-next-workflow" ]; then
          # Install dependencies
          cd ./.github/actions/rc-next-workflow
          npm install || echo "Failed to install dependencies"
          npm run build || echo "Failed to build"
          
          # Run the script
          node dist/trigger.js || echo "Failed to run trigger.js"
        else
          echo "rc-next-workflow directory not found"
          find .github -type d | grep -i workflow || echo "No workflow directories found"
        fi
name: Deploy Charts to environments
on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (format: x-x-x)'
        required: true
        type: string
      environment:
        description: 'the environment to deploy to'
        required: true
        type: choice
        options:
          - rc-next
          - staging
          - prod
      target_repo:
        description: 'Optional: Specific repository to deploy (default: all repos)'
        required: false
        type: string

jobs:
  execute-workflow:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run RC Next Workflow
        if: ${{ inputs.environment == 'rc-next' }}
        id: rc-next-workflow
        uses: ./.github/actions/rc-next-workflow
        with:
          release_version: ${{ inputs.release_version }}
          github_token: ${{ secrets.PAT_TOKEN }}
          github_actor: ${{ github.actor }}
          docker_hub_username: occasio
          docker_hub_token: ${{ secrets.DOCKER_HUB_TOKEN }}
          helm_username: ocamachine
          helm_registry: ghcr.io/occasio-technology-solutions
          target_repo: ${{ inputs.target_repo }}
          
      - name: Run Staging Workflow
        if: ${{ inputs.environment == 'staging' }}
        id: staging-workflow
        uses: ./.github/actions/staging-workflow
        with:
          release_version: ${{ inputs.release_version }}
          github_token: ${{ secrets.PAT_TOKEN }}
          github_actor: ${{ github.actor }}
          target_repo: ${{ inputs.target_repo }}
          docker_hub_token: ${{ secrets.DOCKER_HUB_TOKEN }}
          docker_hub_username: owolabialiu
          
      - name: Trigger Flux Deployment for RC Next and Staging
        uses: ./.github/actions/trigger-flux
        with:
          environment: ${{ inputs.environment }}
          github_token: ${{ secrets.PAT_TOKEN }}
          github_actor: ${{ github.actor }}
          chart_version: ${{ inputs.environment == 'rc-next' && steps.rc-next-workflow.outputs.platform_version || steps.staging-workflow.outputs.platform_version }}
          
  build_platform:
    needs: execute-workflow
    if: ${{ inputs.environment == 'rc-next' }}
    runs-on: ubuntu-latest
    outputs:
      docker-tag: ${{ steps.build-chart.outputs.docker-tag }}
      docker-repo: ${{ steps.build-chart.outputs.docker-repo }}
      primary-image: ${{ steps.build-chart.outputs.primary-image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Build Chart
        id: build-chart
        uses: ./.github/actions/build-chart
        with:
          chart_dir: charts/platform
          chart_overwrite: true
          is_lib_chart: false
          git_branch: platform-${{ inputs.release_version }}
          docker-hub-user: owolabialiu
          docker-hub-token: ${{ secrets.DOCKER_HUB_TOKEN }}
          pat-token: ${{ secrets.PAT_TOKEN }}

  copacetic-vulnerability-scanning:
    runs-on: ubuntu-latest
    permissions:
      packages: read
      contents: write
    needs: build_platform
    if: ${{ inputs.environment == 'rc-next' }}
    steps:
      - name: Extract image info
        id: image-info
        run: |
          # Extract the first tag from the build output
          DOCKER_REPO="${{ needs.build_platform.outputs.docker-repo }}"
          DOCKER_TAGS="${{ needs.build_platform.outputs.docker-tag }}"
          
          # Get the first tag (assuming it's the primary one)
          FIRST_TAG=$(echo "$DOCKER_TAGS" | head -n1)
          
          echo "Using image: $DOCKER_REPO:$FIRST_TAG"
          echo "image_ref=$DOCKER_REPO:$FIRST_TAG" >> $GITHUB_OUTPUT
          
      - name: Generate Trivy Report
        uses: aquasecurity/trivy-action@0.29.0
        with:
          scan-type: "image"
          format: "json"
          output: "report.json"
          ignore-unfixed: true
          vuln-type: "os"
          image-ref: ${{ steps.image-info.outputs.image_ref }}

      - name: Check vulnerability count
        id: vuln_count
        run: |
          report_file="report.json"
          vuln_count=$(jq 'if .Results then [.Results[] | select(.Class=="os-pkgs" and .Vulnerabilities!=null) | .Vulnerabilities[]] | length else 0 end' "$report_file")
          echo "vuln_count=$vuln_count" >> $GITHUB_OUTPUT

      - name: Run copa action
        if: steps.vuln_count.outputs.vuln_count != '0'
        id: copa
        uses: project-copacetic/copa-action@v1.2.1
        with:
          image: ${{ steps.image-info.outputs.image_ref }}
          image-report: "report.json"
          patched-tag: v${{ inputs.release_version }}-patched
  
      - name: Login to Docker Hub for patched image
        if: steps.copa.conclusion == 'success'
        uses: docker/login-action@v3.3.0
        with:
          username: owolabialiu
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Push patched image to Docker Hub
        if: steps.copa.conclusion == 'success'
        run: docker push ${{ steps.copa.outputs.patched-image }}

  aws_inspectector_scan:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: read
      contents: write
    needs: copacetic-vulnerability-scanning
    if: ${{ inputs.environment == 'rc-next' }}
    steps:
      # setup your AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: "us-east-1"
          role-to-assume: "arn:aws:iam::908027403160:role/aws-inspector"

      # Login to Docker Hub to ensure Inspector can pull the image
      - name: Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: owolabialiu
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Determine which image to scan (patched if available, otherwise original)
      - name: Determine image to scan
        id: scan-image
        run: |
          if [[ "${{ needs.copacetic-vulnerability-scanning.outputs.vuln-count }}" != "0" && "${{ needs.copacetic-vulnerability-scanning.outputs.patched-image }}" != "" ]]; then
            echo "image_to_scan=${{ needs.copacetic-vulnerability-scanning.outputs.patched-image }}" >> $GITHUB_OUTPUT
            echo "Scanning patched image: ${{ needs.copacetic-vulnerability-scanning.outputs.patched-image }}"
          else
            echo "image_to_scan=${{ needs.build_platform.outputs.image-ref }}" >> $GITHUB_OUTPUT
            echo "Scanning original image: ${{ needs.build_platform.outputs.image-ref }}"
          fi

      # Pull the image locally so Inspector can access it
      - name: Pull image locally
        run: |
          docker pull ${{ steps.scan-image.outputs.image_to_scan }}

      - name: Scan image with Inspector
        uses: aws-actions/vulnerability-scan-github-action-for-amazon-inspector@v1
        id: inspector
        with:
          artifact_type: 'container'
          artifact_path: ${{ steps.scan-image.outputs.image_to_scan }}
          critical_threshold: 1
          high_threshold: 1
          medium_threshold: 1
          low_threshold: 1
          other_threshold: 1
          display_vulnerability_findings: enabled
          output_sbom_path: ./sbom_output.json
          output_inspector_scan_path: ./inspector_scan_output.json
          output_inspector_scan_path_csv: ./inspector_scan_output.csv
          output_inspector_scan_path_markdown: ./inspector_scan_output.md

      - name: Upload Inspector scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: inspector-scan-results
          path: |
            ./sbom_output.json
            ./inspector_scan_output.json
            ./inspector_scan_output.csv
            ./inspector_scan_output.md

      - name: Check vulnerability threshold
        run: |
          if [[ "${{ steps.inspector.outputs.vulnerability_threshold_exceeded }}" == "true" ]]; then
            echo "❌ Vulnerability threshold exceeded!"
            exit 1
          else
            echo "✅ Vulnerability scan passed!"
          fi

      - name: Push scaned image to Docker Hub
        if: steps.inspector.outputs.vulnerability_threshold_exceeded == 'success'
        run: docker push ${{ steps.copa.outputs.patched-image }}        

  

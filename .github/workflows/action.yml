name: Deploy Charts to environments
on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (format: x-x-x)'
        required: true
        type: string
      environment:
        description: 'the environment to deploy to'
        required: true
        type: choice
        options:
          - rc-next
          - staging
          - prod
      target_repo:
        description: 'Optional: Specific repository to deploy (default: all repos)'
        required: false
        type: string

jobs:
  execute-workflow:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
      pull-requests: write  # Added for PR creation
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run RC Next Workflow
        if: ${{ inputs.environment == 'rc-next' }}
        id: rc-next-workflow
        uses: ./.github/actions/rc-next-workflow
        with:
          release_version: ${{ inputs.release_version }}
          github_token: ${{ secrets.PAT_TOKEN }}
          github_actor: ${{ github.actor }}
          docker_hub_username: occasio
          docker_hub_token: ${{ secrets.DOCKER_HUB_TOKEN }}
          helm_username: ocamachine
          helm_registry: ghcr.io/occasio-technology-solutions
          target_repo: ${{ inputs.target_repo }}
          
      - name: Run Staging Workflow
        if: ${{ inputs.environment == 'staging' }}
        id: staging-workflow
        uses: ./.github/actions/staging-workflow
        with:
          release_version: ${{ inputs.release_version }}
          github_token: ${{ secrets.PAT_TOKEN }}
          github_actor: ${{ github.actor }}
          target_repo: ${{ inputs.target_repo }}
          docker_hub_token: ${{ secrets.DOCKER_HUB_TOKEN }}
          docker_hub_username: owolabialiu  # Added explicit username
          
      - name: Trigger Flux Deployment for RC Next and Staging
        uses: ./.github/actions/trigger-flux
        with:
          environment: ${{ inputs.environment }}
          github_token: ${{ secrets.PAT_TOKEN }}
          github_actor: ${{ github.actor }}
          chart_version: ${{ inputs.environment == 'rc-next' && steps.rc-next-workflow.outputs.platform_version || steps.staging-workflow.outputs.platform_version }}
          
  build_platform:
    needs: execute-workflow
    if: ${{ inputs.environment == 'rc-next' }}
    runs-on: ubuntu-latest
    outputs:
      docker-tag: ${{ steps.build-chart.outputs.docker-tag }}
      docker-repo: ${{ steps.build-chart.outputs.docker-repo }}
      primary-image: ${{ steps.build-chart.outputs.primary-image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Build Chart
        id: build-chart
        uses: ./.github/actions/build-chart
        with:
          chart_dir: charts/platform
          chart_overwrite: true
          is_lib_chart: false
          git_branch: platform-${{ inputs.release_version }}
          docker-hub-user: owolabialiu
          docker-hub-token: ${{ secrets.DOCKER_HUB_TOKEN }}
          pat-token: ${{ secrets.PAT_TOKEN }}

  patch:
    runs-on: ubuntu-latest
    permissions:
      packages: read
      contents: write
    needs: build_platform
    if: ${{ inputs.environment == 'rc-next' }}
    steps:
      - name: Extract image info
        id: image-info
        run: |
          # Extract the first tag from the build output
          DOCKER_REPO="${{ needs.build_platform.outputs.docker-repo }}"
          DOCKER_TAGS="${{ needs.build_platform.outputs.docker-tag }}"
          
          # Get the first tag (assuming it's the primary one)
          FIRST_TAG=$(echo "$DOCKER_TAGS" | head -n1)
          
          echo "Using image: $DOCKER_REPO:$FIRST_TAG"
          echo "image_ref=$DOCKER_REPO:$FIRST_TAG" >> $GITHUB_OUTPUT
          
      - name: Generate Trivy Report
        uses: aquasecurity/trivy-action@0.29.0
        with:
          scan-type: "image"
          format: "json"
          output: "report.json"
          ignore-unfixed: true
          vuln-type: "os"
          image-ref: ${{ steps.image-info.outputs.image_ref }}

      - name: Check vulnerability count
        id: vuln_count
        run: |
          report_file="report.json"
          vuln_count=$(jq 'if .Results then [.Results[] | select(.Class=="os-pkgs" and .Vulnerabilities!=null) | .Vulnerabilities[]] | length else 0 end' "$report_file")
          echo "vuln_count=$vuln_count" >> $GITHUB_OUTPUT

      - name: Run copa action
        if: steps.vuln_count.outputs.vuln_count != '0'
        id: copa
        uses: project-copacetic/copa-action@v1.2.1
        with:
          image: ${{ steps.image-info.outputs.image_ref }}
          image-report: "report.json"
          patched-tag: ghcr.io/${{ github.repository_owner }}/platform-actions:patched-${{ github.sha }}

      - name: Login to GHCR
        if: steps.copa.conclusion == 'success'
        id: login
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}

      - name: Push patched image
        if: steps.login.conclusion == 'success'
        run: |
          docker push ${{ steps.copa.outputs.patched-image }}


# name: Deploy Charts to environments
# on:
#   workflow_dispatch:
#     inputs:
#       release_version:
#         description: 'Release version (format: x-x-x)'
#         required: true
#         type: string
#       environment:
#         description: 'the environment to deploy to'
#         required: true
#         type: choice
#         options:
#           - rc-next
#           - staging
#           - prod
#       target_repo:
#         description: 'Optional: Specific repository to deploy (default: all repos)'
#         required: false
#         type: string

# jobs:
#   execute-workflow:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#       packages: read
#       pull-requests: write  # Added for PR creation
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
        
#       - name: Run RC Next Workflow
#         if: ${{ inputs.environment == 'rc-next' }}
#         id: rc-next-workflow
#         uses: ./.github/actions/rc-next-workflow
#         with:
#           release_version: ${{ inputs.release_version }}
#           github_token: ${{ secrets.PAT_TOKEN }}
#           github_actor: ${{ github.actor }}
#           docker_hub_username: occasio
#           docker_hub_token: ${{ secrets.DOCKER_HUB_TOKEN }}
#           helm_username: ocamachine
#           helm_registry: ghcr.io/occasio-technology-solutions
#           target_repo: ${{ inputs.target_repo }}
          
#       - name: Run Staging Workflow
#         if: ${{ inputs.environment == 'staging' }}
#         id: staging-workflow
#         uses: ./.github/actions/staging-workflow
#         with:
#           release_version: ${{ inputs.release_version }}
#           github_token: ${{ secrets.PAT_TOKEN }}
#           github_actor: ${{ github.actor }}
#           target_repo: ${{ inputs.target_repo }}
#           docker_hub_token: ${{ secrets.DOCKER_HUB_TOKEN }}
#           docker_hub_username: owolabialiu  # Added explicit username
          
#       - name: Trigger Flux Deployment for RC Next and Staging
#         uses: ./.github/actions/trigger-flux
#         with:
#           environment: ${{ inputs.environment }}
#           github_token: ${{ secrets.PAT_TOKEN }}
#           github_actor: ${{ github.actor }}
#           chart_version: ${{ inputs.environment == 'rc-next' && steps.rc-next-workflow.outputs.platform_version || steps.staging-workflow.outputs.platform_version }}
          
#   build_platform:
#     needs: execute-workflow
#     if: ${{ inputs.environment == 'rc-next' }}
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
        
#       - name: Build Chart
#         uses: ./.github/actions/build-chart
#         with:
#           chart_dir: charts/platform
#           chart_overwrite: true
#           is_lib_chart: false
#           git_branch: platform-${{ inputs.release_version }}
#           docker-hub-user: owolabialiu
#           docker-hub-token: ${{ secrets.DOCKER_HUB_TOKEN }}
#           pat-token: ${{ secrets.PAT_TOKEN }}

#   patch:
#     runs-on: ubuntu-latest
#     permissions:
#       packages: read
#       contents: write
#     needs: build_platform 
#     steps:
#       - name: Generate Trivy Report
#         uses: aquasecurity/trivy-action@0.29.0
#         with:
#           scan-type: "image"
#           format: "json"
#           output: "report.json"
#           ignore-unfixed: true
#           vuln-type: "os"
#           image-ref: ${{ needs.build_platform.outputs.docker-repo }}:${{ needs.build_platform.outputs.docker-tag }}

#       - name: Check vulnerability count
#         id: vuln_count
#         run: |
#           report_file="report.json"
#           vuln_count=$(jq 'if .Results then [.Results[] | select(.Class=="os-pkgs" and .Vulnerabilities!=null) | .Vulnerabilities[]] | length else 0 end' "$report_file")
#           echo "vuln_count=$vuln_count" >> $GITHUB_OUTPUT

#       - name: Run copa action
#         if: steps.vuln_count.outputs.vuln_count != '0'
#         id: copa
#         uses: project-copacetic/copa-action@v1.2.1
#         with:
#           image: ${{ needs.build_platform.outputs.docker-repo }}:${{ needs.build_platform.outputs.docker-tag }}
#           image-report: "report.json"
#           patched-tag: ${{ matrix.next_patch_tag }}

#       - name: Login to GHCR
#         if: steps.copa.conclusion == 'success'
#         id: login
#         uses: docker/login-action@v3.3.0
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GHCR_TOKEN }}

#       - name: Push patched image
#         if: steps.login.conclusion == 'success'
#         run: |
#           docker push ${{ steps.copa.outputs.patched-image }}

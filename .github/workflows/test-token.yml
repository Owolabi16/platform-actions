name: Test GitHub Token
on:
  workflow_dispatch:

jobs:
  test-token:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Test Tokens
        run: |
          echo "üîç Testing PAT_TOKEN..."
          
          # Test PAT_TOKEN with Bearer authentication
          echo "Testing PAT_TOKEN with Bearer format:"
          PAT_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/user)
          
          PAT_HTTP_CODE=$(echo "$PAT_RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
          PAT_BODY=$(echo "$PAT_RESPONSE" | sed 's/HTTPSTATUS:[0-9]*$//')
          
          echo "PAT_TOKEN Response Code: $PAT_HTTP_CODE"
          if [ "$PAT_HTTP_CODE" = "200" ]; then
            echo "‚úÖ PAT_TOKEN works with Bearer!"
            echo "User: $(echo "$PAT_BODY" | jq -r '.login // "Unknown"')"
          else
            echo "‚ùå PAT_TOKEN failed with Bearer (HTTP $PAT_HTTP_CODE)"
            echo "Error: $(echo "$PAT_BODY" | jq -r '.message // "No error message"')"
          fi
          
          echo ""
          echo "üîç Testing GITHUB_TOKEN for comparison..."
          
          # Test built-in GITHUB_TOKEN
          echo "Testing GITHUB_TOKEN with Bearer format:"
          GITHUB_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/user)
          
          GITHUB_HTTP_CODE=$(echo "$GITHUB_RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
          GITHUB_BODY=$(echo "$GITHUB_RESPONSE" | sed 's/HTTPSTATUS:[0-9]*$//')
          
          echo "GITHUB_TOKEN Response Code: $GITHUB_HTTP_CODE"
          if [ "$GITHUB_HTTP_CODE" = "200" ]; then
            echo "‚úÖ GITHUB_TOKEN works with Bearer!"
            echo "User: $(echo "$GITHUB_BODY" | jq -r '.login // "Unknown"')"
          else
            echo "‚ùå GITHUB_TOKEN failed with Bearer (HTTP $GITHUB_HTTP_CODE)"
            echo "Error: $(echo "$GITHUB_BODY" | jq -r '.message // "No error message"')"
          fi
          
          echo ""
          echo "üîç Testing token format..."
          
          # Check token format (don't expose the actual token)
          TOKEN_PREFIX=$(echo "${{ secrets.PAT_TOKEN }}" | cut -c1-4)
          TOKEN_LENGTH=$(echo "${{ secrets.PAT_TOKEN }}" | wc -c)
          
          echo "PAT_TOKEN starts with: ${TOKEN_PREFIX}***"
          echo "PAT_TOKEN length: $TOKEN_LENGTH characters"
          
          if [[ "$TOKEN_PREFIX" == "ghp_" ]]; then
            echo "‚úÖ Using new GitHub token format"
          elif [[ "$TOKEN_LENGTH" -eq 41 ]]; then
            echo "‚ö†Ô∏è  Using legacy 40-character token format"
          else
            echo "‚ùì Unknown token format"
          fi